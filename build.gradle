buildscript {
    repositories {
        jcenter()
        maven { url "https://binrepo.target.com/artifactory/platform" }
    }
    dependencies {
        classpath "com.target.platform:platform-connector-gradle:2.0.8"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72" apply false
    id "org.jetbrains.kotlin.kapt" version "1.3.72" apply false
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72" apply false
    id "org.jlleitschuh.gradle.ktlint" version "8.2.0" apply false
    id "io.gitlab.arturbosch.detekt" version "1.0.0-RC15" apply false
    id "org.sonarqube" version "2.7.1" apply false
    id "org.flywaydb.flyway" version "6.0.4" apply false
    id "maven-publish"
}

apply plugin: "com.target.platform.connector"
project.tasks.startScripts.enabled = false
apply plugin: "java"
apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "org.jetbrains.kotlin.kapt"
apply plugin: "org.jetbrains.kotlin.plugin.allopen"
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: "org.sonarqube"
apply plugin: "groovy"

apply from: "test.gradle"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url "https://packages.confluent.io/maven/" }
    maven { url "https://binrepo.target.com/artifactory/lists-v4" }
    maven { url "https://binrepo.target.com/artifactory/platform" }
    mavenLocal()
}

dependencies {
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut.reactor:micronaut-reactor"
    implementation "io.projectreactor.kotlin:reactor-kotlin-extensions:1.1.0-M1"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.3.72"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.72"
    implementation "io.github.microutils:kotlin-logging:1.6.24"
    implementation "com.lmax:disruptor:3.4.2"
    implementation "io.micrometer:micrometer-core:1.2.0"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut.beanvalidation:micronaut-hibernate-validator"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut.kafka:micronaut-kafka"
    implementation 'org.apache.kafka:kafka_2.12:2.3.0'

    implementation "com.tgt.lists:lists-oauth:2.201.0"
    implementation "com.tgt.lists.micronaut:micronaut-zipkin:2.201.0"
    implementation "com.tgt.lists:lists-message-bus:2.201.1"
    implementation "com.tgt.lists:lists-logging:2.201.0"
    implementation "com.tgt.lists:platform-connector-micronaut:2.0.8.1"
    implementation "io.swagger.core.v3:swagger-annotations"
    implementation "com.tgt.lists.micronaut:micronaut-metrics:2.201.0"

    implementation "com.tgt.lists:lists-components:2.201.13"
    implementation "com.tgt.cronbeacon:beacon-client:2.201.2"

    implementation 'com.tgt.lists.micronaut:micronaut-cassandra:2.201.10'
    implementation "io.micronaut.cassandra:micronaut-cassandra"
    implementation "com.datastax.oss:java-driver-mapper-processor:${javaDriverVersion}"

    implementation "io.micronaut.kotlin:micronaut-kotlin-runtime"
    implementation "io.micronaut:micronaut-runtime"

    kapt "io.micronaut.configuration:micronaut-openapi:1.5.0"
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"

    runtime "com.fasterxml.jackson.core:jackson-databind:2.9.8"
    runtime "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9"

    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "io.micronaut:micronaut-inject-groovy:$micronautVersion"
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation "io.micronaut:micronaut-http-client:2.0.1"
    testImplementation("io.micronaut.test:micronaut-test-spock")
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.0"
    testImplementation "org.junit.platform:junit-platform-suite-api"
    testImplementation "org.junit.platform:junit-platform-runner"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.3.0"

    testImplementation "io.micronaut.test:micronaut-test-spock"
    testImplementation "com.tgt.lists.micronaut:micronaut-test:2.201.0"
    testImplementation("org.objenesis:objenesis:2.6")
    testImplementation 'io.micronaut.micrometer:micronaut-micrometer-registry-prometheus'
    testImplementation "org.testcontainers:spock:1.12.2"
    testImplementation "org.testcontainers:cassandra:1.13.0"
    testImplementation "cglib:cglib:3.3.0"
    testImplementation group: 'io.opentracing', name: 'opentracing-mock', version: '0.33.0'
    testImplementation 'org.apache.kafka:kafka-clients:2.3.0:test'
    testImplementation 'org.apache.kafka:kafka_2.12:2.3.0'
    testImplementation 'org.apache.kafka:kafka_2.12:2.3.0:test'
    testImplementation "org.testcontainers:kafka:1.14.3"
}

configurations.all { exclude group: "ch.qos.logback" }

jar {
    exclude('**/log4j*.xml')
    exclude('**/logback*.xml')
    exclude('**/application*.yml')
    exclude('**/proxy*.yml')
}

allOpen {
    annotation("io.micronaut.http.annotation.Controller")
    annotation("javax.inject.Singleton")
    annotation("io.micronaut.context.annotation.Prototype")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
        javaParameters = true
    }
}

detekt {
    parallel = true
    config = files("src/main/resources/detekt.yml")
    input = files(
            "src/main/kotlin/com/tgt/lists/api"
    )
    filters = ""

    reports {
        html {
            enabled = true
            destination = file("build/reports/detekt.html")
        }
    }

    idea {
        path = ".idea"
        codeStyleScheme = ".idea/idea-code-style.xml"
        inspectionsProfile = ".idea/inspect.xml"
        report = "$project.projectDir/reports"
        mask = "*.kt,"
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

def clientJarName = 'atlas-client'
task clientJar(type: Jar, dependsOn: classes) {
    archiveBaseName = clientJarName
    version =  System.properties["VERSION"]
    includeEmptyDirs = false
    from (sourceSets.main.output)

    // META-INF/services should be included when any of the included classes use micronaut annotations e.g. @Client, @Filter etc.
    // Include Enum classes with <Classname>* rather than <Classname>.* because Enums with companion objects have <Classname>.class and <Classname>$Companion.class
    // Include micronaut's $ prefixed and suffixed classes for compiled time injection to work
    include ("**\\api\\type\\**\\*", "**\\api\\transport\\**\\*", "**\\kafka\\model\\**\\*", "**\\api\\validator\\**\\*")
    include ("**\\api\\util\\ItemRefIdBuilder*", "**\\api\\util\\ClientConstants*")
    include ("**\\api\\service\\transform\\list\\ListsTransformationStep*", "**\\api\\service\\transform\\list\\UserMetaDataTransformationStep*")
    include ("**\\api\\service\\transform\\list_items\\ListItemsTransformationStep*", "**\\api\\service\\transform\\list_items\\UserItemMetaDataTransformationStep*")
    include ("**\\api\\service\\transform\\TransformationContext*", "**\\api\\service\\transform\\TransformationPipelineConfiguration*")

    exclude ("**\\api\\transport\\mapper\\**\\*")
}
task clientSourcesJar(type: Jar, dependsOn: classes) {
    archiveBaseName = clientJarName
    version =  System.properties["VERSION"]
    archiveClassifier = 'sources'
    includeEmptyDirs = false
    from (sourceSets.main.kotlin)
    include ("**\\api\\type\\**\\*", "**\\api\\transport\\**\\*", "**\\kafka\\model\\**\\*", "**\\api\\validator\\**\\*")
    include ("**\\api\\util\\ItemRefIdBuilder*", "**\\api\\util\\ClientConstants*")
    include ("**\\api\\service\\transform\\list\\ListsTransformationStep*", "**\\api\\service\\transform\\list\\UserMetaDataTransformationStep*")
    include ("**\\api\\service\\transform\\list_items\\ListItemsTransformationStep*", "**\\api\\service\\transform\\list_items\\UserItemMetaDataTransformationStep*")
    include ("**\\api\\service\\transform\\TransformationContext*", "**\\api\\service\\transform\\TransformationPipelineConfiguration*")

    exclude ("**\\api\\transport\\mapper\\**\\*")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'atlas'
            version = System.properties["VERSION"]
            artifact sourcesJar
        }
    }
    publications {
        client(MavenPublication) {
            artifactId = 'atlas-client'
            version = System.properties["VERSION"]
            artifact tasks.clientJar
            artifact tasks.clientSourcesJar
        }
    }
    repositories {
        maven {
            credentials {
                username = System.getProperty('USERNAME')
                password = System.getProperty('PASSWORD')
            }
            url 'https://binrepo.target.com/artifactory/lists-v4'
        }
    }
}

task downloadDependencies() {
    doLast {
        allprojects { p ->
            configurations.each { c ->
                if (c.canBeResolved) {
                    println "Downloading dependencies for $p.path - $c.name"
                    c.files
                }
            }
        }
    }
}
